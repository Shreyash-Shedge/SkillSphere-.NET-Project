package com.example.skillsphere.config;

import java.util.Base64;
import java.util.Collections;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.example.skillsphere.model.User;
import com.example.skillsphere.service.UserService;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Component
public class UserAuthenticationProvider {

    private static final Logger log = LoggerFactory.getLogger(UserAuthenticationProvider.class);

    @Value("${security.jwt.token.secret-key:secret-key}")
    private String secretKey;

    @PostConstruct
    protected void init() {
        secretKey = Base64.getEncoder().encodeToString(secretKey.getBytes());
        log.debug("JWT Secret key initialized");
    }

    public String createToken(String userId) {
        Date now = new Date();
        Date validity = new Date(now.getTime() + 3600000); // 1 hour

        Algorithm algorithm = Algorithm.HMAC256(secretKey);
        String token = JWT.create()
                .withSubject(userId)
                .withIssuedAt(now)
                .withExpiresAt(validity)
                .sign(algorithm);

        log.debug("Created JWT token for user ID: {}", userId);
        return token;
    }

    public Authentication validateToken(String token, UserService userService) {
        log.debug("Validating token: {}", token);

        Algorithm algorithm = Algorithm.HMAC256(secretKey);

        JWTVerifier verifier = JWT.require(algorithm)
                .build();

        DecodedJWT decoded = verifier.verify(token);
        Long userId = Long.parseLong(decoded.getSubject());

        log.debug("Token decoded, retrieving user with ID: {}", userId);

        User user = userService.findById(userId).getContent();

        if (user == null) {
            log.error("User not found with ID: {}", userId);
            throw new UsernameNotFoundException("User not found with id: " + userId);
        }

        log.debug("User found, returning authentication");
        return new UsernamePasswordAuthenticationToken(user, null, Collections.emptyList());
    }
}
