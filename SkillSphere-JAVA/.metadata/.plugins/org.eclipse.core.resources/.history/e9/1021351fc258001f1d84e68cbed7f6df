package com.example.skillsphere.controller;

import com.example.skillsphere.exception.PaymentNotFoundException;
import com.example.skillsphere.model.Payment;
import com.example.skillsphere.model.PaymentResponse;
import com.example.skillsphere.repository.PaymentRepository;
import com.example.skillsphere.service.PaymentService;
import com.example.skillsphere.service.PaypalService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("/api/payments")
public class PaymentController {

    @Autowired
    private PaymentService paymentService;
    
    @Autowired
    private PaymentRepository paymentRepository;

    @Autowired
    private PaypalService paypalService;

    @GetMapping("/{userId}")
    public ResponseEntity<List<Payment>> getAllPaymentsByUserId(@PathVariable Long userId) {
        return ResponseEntity.ok(paymentService.getAllPaymentsByUserId(userId));
    }

    @PostMapping("/create/{userId}/{courseId}")
    public ResponseEntity<PaymentResponse> createPayment(@PathVariable Long userId,
                                                         @PathVariable Long courseId, @RequestParam BigDecimal amount) throws IOException {
        return ResponseEntity.ok(paymentService.createPayment(userId, courseId, amount).getBody());
    }

    @GetMapping("/success")
    public ResponseEntity<?> paymentSuccess(@RequestParam("token") String orderId, @RequestParam("PayerID") String payerId) {
        try {
            // Find the payment by orderId
            Payment payment = paymentRepository.findByOrderId(orderId);
            if (payment == null) {
                throw new PaymentNotFoundException("Payment not found");
            }

            // Capture the payment and create the purchase record
            paymentService.captureOrder(payment, orderId);

            return ResponseEntity.ok("Payment Success and Purchase Recorded");
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Payment Failure: " + e.getMessage());
        }
    }

    @DeleteMapping("/{userId}/{paymentId}")
    public ResponseEntity<Void> refundPayment(@PathVariable Long userId, @PathVariable Long paymentId) {
        paymentService.refundPayment(paymentId, userId);
        return ResponseEntity.noContent().build();
    }
}
