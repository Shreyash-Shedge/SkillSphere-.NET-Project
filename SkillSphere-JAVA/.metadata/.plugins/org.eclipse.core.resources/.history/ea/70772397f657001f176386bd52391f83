package com.example.skillsphere.model;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.UUID;

import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.Lob;
import jakarta.persistence.ManyToOne;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class Workshop {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private UUID id;

    @NotNull(message = "Title is required")
    @Size(min = 1, max = 255, message = "Title must be between 1 and 255 characters")
    private String title;

    @Size(max = 1000, message = "Description can be up to 1000 characters")
    private String description;

    @Min(value = 1, message = "Duration must be at least 1 minute")
    @Max(value = 1440, message = "Duration cannot exceed 1440 minutes (24 hours)")
    private int duration;  // Duration in minutes

    @NotNull(message = "Call platform is required")
    @Size(min = 1, max = 100, message = "Call platform must be between 1 and 100 characters")
    private String callPlatform;  // Platform such as Zoom, Google Meet

    @NotNull(message = "External link is required")
    @Pattern(
        regexp = "^(https://meet\\.google\\.com/|https://zoom\\.us/).*$",
        message = "Invalid external link. Only Google Meet or Zoom links are allowed."
    )
    private String externalLink;  // Link to the workshop

    @NotNull(message = "Price is required")
    @Pattern(regexp = "^[0-9]+(\\.[0-9]{1,2})?$", message = "Price must be a valid number with up to two decimal places")
    private String price;  // Price for the workshop

    @NotNull(message = "Start date is required")
    private LocalDateTime startDate;  // Start date and time of the workshop

    @NotNull(message = "End date is required")
    private LocalDateTime endDate;  // End date and time of the workshop

    @NotNull(message = "Start time is required")
    private LocalTime startTime;  // Start time of the workshop

    @NotNull(message = "End time is required")
    private LocalTime endTime;  // End time of the workshop

    @ManyToOne
    @JoinColumn(name = "creator_id", nullable = false)
    @NotNull(message = "Creator is required")
    private Creator creator;  // The creator holding the workshop

    @ElementCollection
    @NotEmpty(message = "At least one topic is required")
    private List<String> topicsCovered;  // List of topics covered in the workshop

    @NotNull(message = "Maximum participants is required")
    @Min(value = 1, message = "There must be at least 1 participant")
    private int maxParticipants;  // Maximum number of participants allowed in the workshop

    @Lob
    private String resources;  // Any additional resources or materials provided for the workshop, stored as a large object (optional)

    @NotNull(message = "Registration deadline is required")
    private LocalDateTime registrationDeadline;  // Deadline for participants to register for the workshop
}
