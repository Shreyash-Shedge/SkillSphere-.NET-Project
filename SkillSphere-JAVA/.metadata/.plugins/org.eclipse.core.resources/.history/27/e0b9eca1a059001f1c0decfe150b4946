package com.example.skillsphere.jwt;

import java.time.Instant;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.oauth2.jwt.JwtClaimsSet;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.JwtEncoderParameters;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.skillsphere.model.AuthRequest;

@RestController
public class JwtAuthenticationResource {

    record JwtResponse(String token) {
    }

    @Autowired
    private JwtEncoder jwtEncoder;

    @Autowired
    private CustomUserDetailsService customUserDetailsService;

    @PostMapping("/authenticate")
    public JwtResponse authenticate(@RequestBody AuthRequest authRequest) {
        UserDetails userDetails = customUserDetailsService.loadUserByUsername(authRequest.getEmail());

        if (userDetails.getPassword().equals("{noop}" + authRequest.getPassword())) {
            return new JwtResponse(createdToken(userDetails));
        } else {
            throw new RuntimeException("Invalid credentials");
        }
    }

    private String createdToken(UserDetails userDetails) {
        return jwtEncoder.encode(JwtEncoderParameters.from(JwtClaimsSet.builder()
                .issuer("self")
                .issuedAt(Instant.now())
                .expiresAt(Instant.now().plusSeconds(60 * 15))
                .subject(userDetails.getUsername())
                .claim("scope", createdScope(userDetails))
                .build())).getTokenValue();
    }

    private String createdScope(UserDetails userDetails) {
        return userDetails.getAuthorities().stream()
                .map(a -> a.getAuthority())
                .collect(Collectors.joining(" "));
    }
}
