package com.example.skillsphere.service;

import com.example.skillsphere.model.Modules;
import com.example.skillsphere.model.Video;
import com.example.skillsphere.repository.ModulesRepository;
import com.example.skillsphere.repository.VideoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.UUID;

@Service
public class VideoService {

    private final String uploadDir = "/var/www/videos/"; // Define your directory here

    @Autowired
    private ModulesRepository modulesRepository;

    @Autowired
    private VideoRepository videoRepository;

    private Video validateVideo(Long moduleId, Long videoId) {
        Video video = videoRepository.findById(videoId).orElseThrow(() -> new RuntimeException("Video with videoId: " + videoId + " does not exist"));

        if (!video.getModule().getModuleId().equals(moduleId)) {
            throw new RuntimeException("VideoId: " + videoId + " does not belong to Module id " + moduleId);
        }
        return video;
    }

    public List<Video> findAllVideosByModuleId(Long moduleId) {
        Modules module = modulesRepository.findById(moduleId).orElseThrow(() -> new RuntimeException("Module with moduleId: " + moduleId + " does not exist"));
        return module.getVideos();
    }

    public ResponseEntity<Video> save(Long moduleId, MultipartFile file, String title) throws IOException {
        Modules module = modulesRepository.findById(moduleId).orElseThrow(() -> new RuntimeException("Module with moduleId: " + moduleId + " does not exist"));

        // Save the file
        String fileName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
        String directory = uploadDir + "module_" + moduleId + "/";
        Path filePath = Paths.get(directory, fileName);
        Files.createDirectories(filePath.getParent());
        Files.copy(file.getInputStream(), filePath);

        // Save the Video entity
        Video video = new Video();
        video.setTitle(title);
        video.setFilePath(filePath.toString());
        video.setModule(module);

        Video savedVideo = videoRepository.save(video);

        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(savedVideo.getVideoId()).toUri();
        return ResponseEntity.created(location).build();
    }

    public Video findVideoByIdForModule(Long moduleId, Long videoId) {
        return validateVideo(moduleId, videoId);
    }

    public ResponseEntity<Video> deleteVideoByIdForModule(Long moduleId, Long videoId) {
        validateVideo(moduleId, videoId);
        videoRepository.deleteById(videoId);
        return ResponseEntity.noContent().build();
    }

    public Video updateVideoByIdForModule(Long moduleId, Long videoId, MultipartFile file, String title) throws IOException {
        Video existingVideo = validateVideo(moduleId, videoId);

        if (title != null && !title.isEmpty()) {
            existingVideo.setTitle(title);
        }

        if (file != null && !file.isEmpty()) {
            // Save the new file
            String fileName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
            String directory = uploadDir + "module_" + moduleId + "/";
            Path filePath = Paths.get(directory, fileName);
            Files.createDirectories(filePath.getParent());
            Files.copy(file.getInputStream(), filePath);

            existingVideo.setFilePath(filePath.toString());
        }

        return videoRepository.save(existingVideo);
    }
}
