package com.example.skillsphere.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.skillsphere.model.Video;
import com.example.skillsphere.service.VideoService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "http://localhost:8080")
public class VideoController {

    @Autowired
    private VideoService videoService;

    @GetMapping("/videos")
    @Operation(summary = "Get all videos for a specific module")
    public List<Video> retrieveAllVideosForModule(@RequestParam Long moduleId) {
        return videoService.findAllVideosByModuleId(moduleId);
    }

    @PostMapping("/videos")
    @Operation(summary = "Upload a video with title and moduleId")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "Video uploaded successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    public ResponseEntity<Video> uploadVideo(
            @RequestParam("moduleId") Long moduleId,
            @RequestParam("title") String title,
            @Parameter(description = "Video file to upload", required = true, 
                       schema = @Schema(type = "string", format = "binary"))
            @RequestParam("file") MultipartFile file) throws IOException {
        return videoService.save(moduleId, title, file);
    }

    @GetMapping("/videos/{videoId}")
    @Operation(summary = "Get a specific video by videoId")
    public Video retrieveVideoForModule(@RequestParam Long moduleId,
                                        @PathVariable Long videoId) {
        return videoService.findVideoByIdForModule(moduleId, videoId);
    }

    @DeleteMapping("/videos/{videoId}")
    @Operation(summary = "Delete a specific video by videoId")
    public ResponseEntity<Video> deleteVideoForModule(@RequestParam Long moduleId,
                                                      @PathVariable Long videoId) {
        return videoService.deleteVideoByIdForModule(moduleId, videoId);
    }

    @PutMapping("/videos/{videoId}")
    @Operation(summary = "Update a specific video by videoId")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Video updated successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    public Video updateVideoForModule(
            @RequestParam("moduleId") Long moduleId,
            @PathVariable Long videoId,
            @RequestParam(value = "title", required = false) String title,
            @Parameter(description = "New video file to upload", required = false, 
                       schema = @Schema(type = "string", format = "binary"))
            @RequestParam(value = "file", required = false) MultipartFile file) throws IOException {
        return videoService.updateVideoByIdForModule(moduleId, videoId, title, file);
    }
}}