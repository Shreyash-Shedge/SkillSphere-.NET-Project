package com.example.skillsphere.service;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.net.URI;
import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.UserDetailsManager;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.example.skillsphere.controller.CreatorController;
import com.example.skillsphere.exception.CreatorNotFoundException;
import com.example.skillsphere.model.Creator;
import com.example.skillsphere.repository.CreatorRepository;

import jakarta.validation.Valid;

@Service
public class CreatorService {

	@Autowired
	private CreatorRepository creatorRepository;
	
	@Autowired
	private PasswordEncoder passwordEncoder;

	// Inject UserDetailsManager for Creators
	@Autowired
	@Qualifier("creatorDetailsManager")
	private UserDetailsManager creatorDetailsManager;
	
	@Autowired
    private JdbcTemplate jdbcTemplate;

	public Creator validateCreator(Long creatorId) {
		return creatorRepository.findById(creatorId).orElseThrow(() -> new CreatorNotFoundException("Creator with id : " + creatorId+" doesn't exist"));
	}

	public List<Creator> findAll() {
		return creatorRepository.findAll();
	}

	public ResponseEntity<Creator> save(@Valid Creator creator) {
		creator.setPassword(passwordEncoder.encode(creator.getPassword()));
		 // Set authorities for the user
       UserDetails userDetails = org.springframework.security.core.userdetails.User.builder()
               .username(creator.getEmail())
               .password(creator.getPassword())
               .authorities(Collections.singletonList(new SimpleGrantedAuthority(creator.getRole())))
               .build();

       
       creatorDetailsManager.createUser(userDetails);	
		
		Creator savedCreator = creatorRepository.save(creator);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(savedCreator.getCreatorId())
				.toUri();
		return ResponseEntity.created(location).build();
	}

	public EntityModel<Creator> findById(long id) {
		Creator creator = validateCreator(id);
		EntityModel<Creator> entityModel = EntityModel.of(creator);
		WebMvcLinkBuilder link = linkTo(methodOn(CreatorController.class).retrieveAllCreators());
		entityModel.add(link.withRel("all-creators"));

		return entityModel;
	}

	public ResponseEntity<Creator> deleteCreatorById(Long id) {
		validateCreator(id);
		String username = creatorRepository.findById(id)
                .map(Creator::getEmail)
                .orElseThrow(() -> new CreatorNotFoundException("Creator not found"));
		
		  deleteAuthoritiesByUsername(username);
		  
		creatorRepository.deleteById(id);
		return ResponseEntity.noContent().build();
	}

	public Creator updateCreator(Long id, Creator creator) {
		Creator existingCreator = validateCreator(id);
		existingCreator.setName(creator.getName());
		existingCreator.setEmail(creator.getEmail());
		existingCreator.setBio(creator.getBio());
		existingCreator.setPassword(passwordEncoder.encode(creator.getPassword()));
		return creatorRepository.save(existingCreator);
	}
	
	 private void deleteAuthoritiesByUsername(String username) {
	        String sql = "DELETE FROM authorities WHERE username = ?";
	        jdbcTemplate.update(sql, username);
	    }

}
