package com.example.skillsphere.service;

import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.example.skillsphere.exception.ConsultationNotFoundException;
import com.example.skillsphere.model.Consultation;
import com.example.skillsphere.model.Creator;
import com.example.skillsphere.repository.ConsultationRepository;

import jakarta.validation.Valid;

@Service
public class ConsultationService {

	@Autowired
	private ConsultationRepository consultationRepository;

	@Autowired
	private CreatorService creatorService;

	private final String uploadDir = "C:\\A Java SkillSphere\\skillsphere\\src\\main\\resources\\static\\thumbnails\\";

	public Consultation validateConsultation(Long creatorId, Long consultationId) {
		Consultation consultation = consultationRepository.findById(consultationId).orElseThrow(
				() -> new ConsultationNotFoundException("Consultation with id: " + consultationId + " does not exist"));

		if (!consultation.getCreator().getCreatorId().equals(creatorId)) {
			throw new ConsultationNotFoundException(
					"Consultation with id: " + consultationId + " does not belong to Creator id " + creatorId);
		}
		return consultation;
	}

	public List<Consultation> findConsultationForCreator(Long creatorId) {
		return consultationRepository.findByCreator_CreatorId(creatorId);
	}

	public ResponseEntity<Consultation> save(Long creatorId, @Valid Consultation consultation,
			MultipartFile thumbnailImage) throws IOException {
		Creator creator = creatorService.validateCreator(creatorId);
		consultation.setCreator(creator);

		if (thumbnailImage != null && !thumbnailImage.isEmpty()) {
			String fileName = UUID.randomUUID().toString() + "_" + thumbnailImage.getOriginalFilename();
			Path filePath = Paths.get(uploadDir, fileName);
			Files.createDirectories(filePath.getParent()); // Ensure the directory exists
			Files.copy(thumbnailImage.getInputStream(), filePath);
			consultation.setThumbnailImage(filePath.toString());
		}

		Consultation savedConsultation = consultationRepository.save(consultation);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
				.buildAndExpand(savedConsultation.getCosultationId()).toUri();
		return ResponseEntity.created(location).body(savedConsultation);
	}

	public Consultation updateConsultationForCreator(Long creatorId, Long consultationId,
			@Valid Consultation consultation, MultipartFile thumbnailImage) throws IOException {
		Consultation existingConsultation = validateConsultation(creatorId, consultationId);

		if (thumbnailImage != null && !thumbnailImage.isEmpty()) {
			// Delete the old thumbnail if it exists
			if (existingConsultation.getThumbnailImage() != null) {
				Path oldFilePath = Paths.get(existingConsultation.getThumbnailImage());
				Files.deleteIfExists(oldFilePath);
			}

			// Save the new thumbnail
			String fileName = UUID.randomUUID().toString() + "_" + thumbnailImage.getOriginalFilename();
			Path newFilePath = Paths.get(uploadDir, fileName);
			Files.createDirectories(newFilePath.getParent()); // Ensure the directory exists
			Files.copy(thumbnailImage.getInputStream(), newFilePath);

			existingConsultation.setThumbnailImage(newFilePath.toString());
		}

		// Update other consultation fields
		existingConsultation.setTitle(consultation.getTitle());
		existingConsultation.setDescription(consultation.getDescription());
		existingConsultation.setSlotsPerUser(consultation.getSlotsPerUser());
		existingConsultation.setDuration(consultation.getDuration());
		existingConsultation.setCallPlatform(consultation.getCallPlatform());
		existingConsultation.setExternalLink(consultation.getExternalLink());
		existingConsultation.setPrice(consultation.getPrice());
		existingConsultation.setStartDate(consultation.getStartDate());
		existingConsultation.setEndDate(consultation.getEndDate());
		existingConsultation.setStartTime(consultation.getStartTime());
		existingConsultation.setEndTime(consultation.getEndTime());

		return consultationRepository.save(existingConsultation);
	}

	public List<Consultation> findAll() {
		return consultationRepository.findAll();
	}

	public ResponseEntity<Consultation> deleteConsultationForCreator(Long creatorId, Long consultationId) {
		validateConsultation(creatorId, consultationId);
		consultationRepository.deleteById(consultationId);
		return ResponseEntity.noContent().build();
	}
}
