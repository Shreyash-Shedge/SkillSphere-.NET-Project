package com.example.skillsphere.jwtconfig;

import java.time.Instant;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.oauth2.jwt.JwtClaimsSet;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.JwtEncoderParameters;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class JwtAuthenticationResource {

	public static record JwtResponse(String token) {};
	
	public static record AuthenticationRequest(String username, String password) {}

	@Autowired
	private JwtEncoder jwtEncoder;


    @Autowired
    private AuthenticationManager authenticationManager;
	
	@PostMapping("/authenticate")
	public JwtResponse authenticate(@RequestBody AuthenticationRequest request) { 
		try {
			 Authentication authentication = authenticationManager.authenticate(
			            new UsernamePasswordAuthenticationToken(request.username, request.password)
			        );
			 return new JwtResponse(createdToken(authentication));
		}catch(AuthenticationException e) {
			 throw new RuntimeException("Invalid credentials");
		}
		
	}

	private String createdToken(Authentication authentication) {
		return jwtEncoder.encode(JwtEncoderParameters.from(JwtClaimsSet.builder().issuer("self").issuedAt(Instant.now())
				.expiresAt(Instant.now().plusSeconds(60 * 15)).subject(authentication.getName())
				.claim("scope", createdScope(authentication)).build())).getTokenValue();
	}

	private String createdScope(Authentication authentication) {
		return authentication.getAuthorities().stream().map(a -> a.getAuthority()).collect(Collectors.joining(" "));
	}
}
